import psutil
import time
import json
import socket
import http.server
import socketserver
import threading
from datetime import datetime

try:
    PORT = 8000
    Handler = http.server.SimpleHTTPRequestHandler
    httpd = socketserver.TCPServer(("", PORT), Handler)

    print(f"Serving JSON data at http://localhost:{PORT}/system_data.json")

    background_thread = threading.Thread(target=httpd.serve_forever)
    background_thread.start()

except KeyboardInterrupt:
    httpd.server_close()
    print("\nHTTP server stopped")


# Function to get the hostname of the machine
def get_hostname():
    return socket.gethostname()


# Function to get the current date and time
def get_current_datetime():
    return datetime.now().isoformat()


# Function to list all running processes and return a list of process dictionaries
def list_running_processes():
    process_list = []
    for process in psutil.process_iter(['pid', 'name', 'status']):
        try:
            # Get process information
            process_info = process.info
            pid = process_info['pid']
            name = process_info['name']
            status = process_info['status']

            # Create a dictionary for each process
            process_dict = {
                'Process ID': pid,
                'Name': name,
                'Status': status
            }
            process_list.append(process_dict)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

    return process_list


# Function to list listening ports and return a list of port dictionaries
def list_listening_ports():
    listening_ports = []
    for conn in psutil.net_connections(kind='inet'):
        if conn.status == 'LISTEN':
            port_dict = {
                'Local Address': f"{conn.laddr.ip}:{conn.laddr.port}",
                'PID': conn.pid if conn.pid else 'N/A'
            }
            listening_ports.append(port_dict)

    return listening_ports

def list_all_services_json():
    service_list = []

    for service in psutil.win_service_iter():
        service_info = {
            "name": service.name(),
            "display_name": service.display_name(),
            "status": service.status(),
            "start_type": service.start_type(),
        }
        service_list.append(service_info)

   # services_json = json.dumps(service_list)
    return service_list


# Function to update and write JSON data to a file
def update_and_write_json():
    process_info_data = list_running_processes()
    listening_ports_data = list_listening_ports()
    free_space_info = get_all_filesystem_free_space()
    list_all_services = list_all_services_json()

    # Include the hostname, date and time, processes, and listening ports in the JSON data
    hostname = get_hostname()
    current_datetime = get_current_datetime()
    data = {
        'Hostname': hostname,
        'Date and Time': current_datetime,
        'Processes': process_info_data,
        'Listening Ports': listening_ports_data,
        'File Systems': free_space_info,
        'All Services': list_all_services
    }

    # Convert the data to JSON
    json_output = json.dumps(data, indent=4)

    # Write JSON data to the file
    with open('system_data.json', 'w') as json_file:
        json_file.write(json_output)

    print("JSON data written to system_data.json")

def get_all_filesystem_free_space():
    filesystems = psutil.disk_partitions(all=True)
    free_space_info = []

    for fs in filesystems:
        try:
            disk_usage = psutil.disk_usage(fs.mountpoint)
            free_space = disk_usage.free / (1024 ** 3)  # Convert to gigabytes
            free_space_info.append({
                "device": fs.device,
                "mountpoint": fs.mountpoint,
                "free_space_gb": free_space
            })
        except Exception as e:
            free_space_info.append({
                "device": fs.device,
                "mountpoint": fs.mountpoint,
                "error": str(e)
            })

    return free_space_info

# Main loop to monitor processes and listening ports
while True:
    # Update and write JSON data every 30 seconds
    update_and_write_json()

    print("-" * 40)

    # Sleep for 30 seconds before refreshing the data
    time.sleep(5)
